extern crate piston_window;
mod components;

use piston_window::*;
use components::{ SceneObject, GUIButton };

main := None => Void: {
    PistonWindow * Mut: window = WindowSettings::new("Hello Calculator", [640, 480])
            .exit_on_esc(true).build().unwrap();
  
    Vec{Box{GUIButton}}: buttons = (<
        Box ( GUIButton { coords: [0.0  , 0.0  , 100.0, 100.0], color: [1.0, 0.0, 0.0, 1.0] } ),
        Box ( GUIButton { coords: [0.0  , 200.0, 100.0, 100.0], color: [1.0, 0.0, 0.0, 1.0] } )
	>);
	
	Option{[f64 ; 2]} * Mut: mousePos = None;
	Bool * Mut: mousePressed = false;
	Bool * Mut: click = false;

    while Some(event) = window.next() {
        window.draw_2d(Ref(event), (context, graphics, device => {
		
			#-- game logic
			click <- false;

			if Some(pos) = event.mouse_cursor_args() {
				mousePos <- Some(pos);
			};
			if Some(button) = event.press_args() {
				if button == Button::Mouse(MouseButton::Left) {
					mousePressed <- true;
				};
			};
            if Some(button) = event.release_args() {
				if button == Button::Mouse(MouseButton::Left) {
					if mousePressed {
						click <- true;
					};
					mousePressed <- false;
				};	
			};

			if Some(args) = event.update_args() {

				extra := {
					dt <- args.dt,
					clicked <- click,
					mousePos <- mousePos,
				};

				for button in buttons.iter() {
					button.update(Ref(event), Ref(extra));
				};
			};

			#-- rendering
			clear([0.2, 0.2, 0.2, 1.0], graphics);
			if Some(_args) = event.render_args() {
				for button in buttons.iter() {
					button.render(Ref(context), graphics);
				};
			};
        }));
    };
};;